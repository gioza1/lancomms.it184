/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LCViews;

import LCControllers.ChatMessage;
import LCControllers.Client;
import LCControllers.Login;
import LCControllers.Server;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.JOptionPane;

/**
 *
 * @author Gio
 */
public class LoginUI extends javax.swing.JFrame {

    private String host;
    Clip clip = null;
    private transient ObjectInputStream mainSInput;		// to read from the socket
    private transient ObjectOutputStream mainSOutput;

    /**
     * Creates new form Login
     */
    public LoginUI(String serverAdd) {
        host = serverAdd;
        initComponents();
        this.getRootPane().setDefaultButton(LogInButton);
        this.setLocationByPlatform(true);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private boolean checkServerConnection() {
        try {
            Socket client = new Socket();
            client.connect(new InetSocketAddress(host, 1500), 2000);
            client.setSoTimeout(1000);
            client.close();
            return true;
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Server is offline!");

            System.out.println(e.getMessage());

            return false;
        }
    }

    private boolean checkIsOnline() {
        int doOnce = 0;
        boolean booleano = false;
        Socket socket = null;
        try {
            socket = new Socket();
            socket.connect(new InetSocketAddress(host, 1500), 2000);
        } catch (Exception e) {

            JOptionPane.showMessageDialog(null, "Server is offline!");

            System.out.println(e.getMessage());

        }
        if (socket.isConnected()) {
            try {
                mainSInput = new ObjectInputStream(socket.getInputStream());
                mainSOutput = new ObjectOutputStream(socket.getOutputStream());
            } catch (IOException eIO) {
                System.out.println("Exception creating new Input/output Streams: " + eIO);
                booleano = false;
            }

            try {
                while (doOnce == 0) {
                    mainSOutput.writeObject(new ChatMessage(ChatMessage.ISONLINE, usernameField.getText()));
                    mainSOutput.reset();
                    doOnce++;
                }
            } // if an error occurs, do not abort just inform the user
            catch (IOException e) {
                System.out.println("Exception creating new Input/output Streams: " + e);
                booleano = false;
            }

            try {
                ChatMessage fromMainServer = (ChatMessage) mainSInput.readObject();
                booleano = fromMainServer.getIsOnline();
            } catch (IOException ex) {
                Logger.getLogger(LoginUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                System.out.println("Class not found daw");
            } finally {
                try {
                    mainSOutput.close();
                } catch (IOException ex) {
                    Logger.getLogger(LoginUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    mainSInput.close();
                } catch (IOException ex) {
                    Logger.getLogger(LoginUI.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    socket.close();
                } catch (IOException ex) {
                    Logger.getLogger(LoginUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return booleano;
    }


    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        LogInButton = new javax.swing.JButton();
        usernameField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(251, 255, 246));

        LogInButton.setBackground(new java.awt.Color(255, 255, 255));
        LogInButton.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        LogInButton.setText("Log in");
        LogInButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                LogInButtonMouseClicked(evt);
            }
        });
        LogInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogInButtonActionPerformed(evt);
            }
        });

        usernameField.setToolTipText("Username");
        usernameField.setName("username");
        usernameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameFieldActionPerformed(evt);
            }
        });

        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel1.setText("Username");

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 12)); // NOI18N
        jLabel2.setText("Password");

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lancomms/logo1.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(280, 280, 280)
                                .addComponent(LogInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(214, 214, 214)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(jLabel4)))
                .addContainerGap(195, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addComponent(jLabel4)
                .addGap(57, 57, 57)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(LogInButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(89, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void LogInButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogInButtonMouseClicked


    }//GEN-LAST:event_LogInButtonMouseClicked

    private void usernameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameFieldActionPerformed

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        LogInButtonActionPerformed(evt);
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void LogInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogInButtonActionPerformed
        if (checkServerConnection()) {

            Login log = new Login();
//        public ClientObject(String server, int port, String username, ClientGUI cg) {
            int userId = log.login(usernameField.getText(), passwordField.getText());
//        ClientObject willPassThis = log.createClientObj(usernameField.getText());

            try {
                if (userId == -1) {
                    playSound(2);
                    throw new Exception("Wrong username and/or password. Please try again.");
                } else if (userId == (-2)) {
                    playSound(2);
                    throw new Exception("Cannot connect to server at this time.");
                } else {
//                    if (!isOnline()) {
                    log.loginTime(userId);
                    MainUI startApp = new MainUI(userId, usernameField.getText(), host);
//                    startApp.setVisible(true);

                    if (!startApp.getIsAlreadyOnline()) { // IF true, start new show MainUI
                        startApp.setVisible(true);
                        this.setVisible(false);
                        this.dispose();
                    } else {
                        playSound(2);
                        JOptionPane.showMessageDialog(null, "Account is already logged in!", "Error", JOptionPane.ERROR_MESSAGE);
                        startApp.dispose();
                    }

                }

            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, e.getMessage());
                System.out.println(e.getMessage());

            }
        } else {
            playSound(2);
        }
    }//GEN-LAST:event_LogInButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton LogInButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JTextField usernameField;
    // End of variables declaration//GEN-END:variables

    public boolean playSound(int whatSound) {
        final java.util.Date date = new java.util.Date();

        File wavfile = null;
        final int LOGIN = 0, LOGOUT = 1, FAIL = 2;
        switch (whatSound) {
            case FAIL:
                wavfile = new File("rsrc/lancomms_error.wav");
                break;

        }

        AudioInputStream audioInput = null;
        boolean x = false;
        try {
            audioInput = AudioSystem.getAudioInputStream(wavfile);
            x = false;
        } catch (UnsupportedAudioFileException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
        AudioFormat format = audioInput.getFormat();
//        DataLine.Info info = new DataLine.Info(Clip.class, format);
//        if (clip != null) {
//            clip.flush();
//        }
        try {
            clip = AudioSystem.getClip();
        } catch (LineUnavailableException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            clip.open(audioInput);
        } catch (LineUnavailableException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Server.class.getName()).log(Level.SEVERE, null, ex);
        }
        clip.start();
        return x;
    }

}
